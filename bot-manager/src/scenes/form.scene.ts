import { UseFilters, UseGuards } from '@nestjs/common';
import { ClientProxy } from '@nestjs/microservices';
import { BOT_NAME } from 'config';
import {
  Command,
  Ctx,
  InjectBot,
  On,
  Scene,
  SceneEnter,
  SceneLeave,
} from 'nestjs-telegraf';
import { TelegrafContext } from 'src/common/interface/context.interface';
import { Form } from 'src/decorators/form.decorator';
import { User } from 'src/decorators/user.decorator';
import { TelegrafExceptionFilter } from 'src/filters/telegraf-exception.filter';
import { UserRegisteredGuard } from 'src/guards/auth.guard';
import { BOT_ROUTER } from 'src/services';
import { getCallbackQuery } from 'src/utils/callback_query';
import { Keyboard } from 'telegram-keyboard';

const StatusKeyboard = Keyboard.make([
  [
    {
      text: 'üßë‚Äçüíª  –°—Ç—É–¥–µ–Ω—Ç',
      callback_data: JSON.stringify({ step: 'status', value: '–°—Ç—É–¥–µ–Ω—Ç' }),
    },
  ],
  [
    {
      text: 'üßë‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫',
      callback_data: JSON.stringify({ step: 'status', value: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫' }),
    },
  ],
  [
    {
      text: 'üßë‚Äçüéì –í—ã–ø—É—Å–∫–Ω–∏–∫ /ü§¥ –ì–æ—Å—Ç—å',
      callback_data: JSON.stringify({ step: 'status', value: '–í—ã–ø—É—Å–∫–Ω–∏–∫' }),
    },
  ],
]).inline();

const HobiesKeyboard = Keyboard.make([
  [
    {
      text: 'üî¨–ù–∞—É–∫–∞',
      callback_data: JSON.stringify({ step: 'hobies', value: 'Science' }),
    },
  ],
  [
    {
      text: 'üíª IT',
      callback_data: JSON.stringify({ step: 'hobies', value: 'IT' }),
    },
  ],
  [
    {
      text: '‚õπÔ∏è‚Äç‚ôÇÔ∏è –°–ø–æ—Ä—Ç',
      callback_data: JSON.stringify({ step: 'hobies', value: 'Sport' }),
    },
  ],
  [
    {
      text: 'üí∞–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ',
      callback_data: JSON.stringify({
        step: 'hobies',
        value: 'Business',
      }),
    },
  ],
  [
    {
      text: 'üéû –ö–∏–Ω–æ –∏ —Å–µ—Ä–∏–∞–ª—ã',
      callback_data: JSON.stringify({
        step: 'hobies',
        value: 'Cinema and series',
      }),
    },
  ],
  [
    {
      text: '‚ôªÔ∏è–≠–∫–æ–ª–æ–≥–∏—è',
      callback_data: JSON.stringify({
        step: 'hobies',
        value: 'Ecology',
      }),
    },
  ],
  [
    {
      text: 'üë∂ –í–æ—Å–ø–∏—Ç–∞–Ω–∏–µ –¥–µ—Ç–µ–π',
      callback_data: JSON.stringify({ step: 'hobies', value: 'Children' }),
    },
  ],
]).inline();

@Scene('form')
@UseFilters(TelegrafExceptionFilter)
@UseGuards(UserRegisteredGuard)
export class FormScene {
  router: ClientProxy;
  pattern: { cmd: string };
  bot: null;

  constructor(@InjectBot(BOT_NAME) bot) {
    this.router = BOT_ROUTER;
    this.pattern = { cmd: 'user.message.save' };
    this.bot = bot;
  }

  @SceneEnter()
  async onEnter(@Ctx() ctx: TelegrafContext, @Form() form) {
    if (!form.status) {
      await (ctx.reply as any)('–í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É.');
      await ctx.scene.leave();
    }
    await (ctx.reply as any)('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –∏–∑ —Å–ø–∏—Å–∫–∞: ', {
      reply_markup: StatusKeyboard.reply_markup,
      one_time_keyboard: true,
    });
  }

  @On('callback_query')
  async onCallback(@Ctx() ctx, @User() user) {
    const data = getCallbackQuery(ctx);

    switch (data.step) {
      case 'status':
        await this.saveFormData('status', data.value, user, ctx);
        await this.handleHobiesChange(ctx);
        return;
      case 'hobies':
        await this.saveFormData('hobies', data.value, user, ctx);
      default:
        return;
    }
  }

  async saveFormData(property: string, value: string, user, ctx) {
    try {
      const result = await this.router
        .send({ cmd: 'form.save' }, { userId: user.id, [property]: value })
        .toPromise();

      await ctx.reply(
        `–°–æ—Ö—Ä–∞–Ω–∏–ª –≤—ã–±–æ—Ä: ${value}.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /quit, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ñ–æ—Ä–º—ã`,
      );
    } catch (err) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à –≤—ã–±–æ—Ä.');
    }
  }

  async handleHobiesChange(@Ctx() ctx) {
    await (ctx.reply as any)(
      '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–∫–∏–µ —Ç–µ–º—ã —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è. –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–∞–∫ —Ç–≤–æ–∏ —à–∞–Ω—Å—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç—É—Ç.\n–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /quit.',
      {
        reply_markup: HobiesKeyboard.reply_markup,
        one_time_keyboard: true,
      },
    );
  }

  @Command('quit')
  async leaveScene(@Ctx() ctx, @Form() form) {
    await ctx.reply(
      `–°—Ç–∞—Ç—É—Å: ${form.status}\n–£–≤–ª–µ—á–µ–Ω–∏—è: ${form.hobies
        .split(',')
        .join(', ')}.`,
    );
    await ctx.reply(
      'üôå –ü–æ–ª—É—á–∏–ª–æ—Å—å! –¢–µ–ø–µ—Ä—å —Ç—ã ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫ –≤—Å—Ç—Ä–µ—á ITMO FAMILY DAY.\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ —É –Ω–∞—Å –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è –ø–∞—Ä–∞, —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n–ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ, –¥–æ–≥–æ–≤–æ—Ä–∏–≤—à–∏—Å—å –æ –º–µ—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∏.üìç\n–¢–∞–∫–∂–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ. üí¨',
    );
    await ctx.scene.leave();
  }
}
