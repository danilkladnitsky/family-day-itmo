version: "3"

services:
  frontend:
    container_name: frontend
    build:
      context: ./bot-frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"

  redis:
    image: "redis:latest"
    container_name: microservice-redis
    restart: always
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - "REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL"
    labels:
      kompose.service.type: nodeport
    command:
      - redis-server
      - "--bind"
      - redis
      - "--port"
      - "6379"
    volumes:
      - /home/data_store/:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - postgres_family

  # postgres:
  #   container_name: postgres_manager
  #   image: postgres:14.3-alpine
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: password
  #     POSTGRES_DB: postgres
  #   ports:
  #     - "5433:5432"
  #   volumes:
  #     - ./postgres:/data/postgres
  #   restart: unless-stopped
  #   networks:
  #     - postgres_family

  message_db:
    container_name: message_db
    image: postgres:14.3-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: message_db
      POSTGRES_HOST: postgres
    ports:
      - "5432:5432"
    volumes:
      - /home/data_store/postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - postgres_family

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: core2pixel@gmail.com
      PGADMIN_DEFAULT_PASSWORD: password
    ports:
      - "5440:80"
    restart: unless-stopped
    depends_on:
      - message_db
    networks:
      - postgres_family
    volumes:
      - /home/data_store/pgadmin-data:/var/lib/pgadmin
    user: root

  bot-manager:
    container_name: bot_manager
    build:
      context: ./bot-manager
      dockerfile: Dockerfile
    command: npm run start
    networks:
      - postgres_family
    depends_on:
      - redis
    environment:
      - mode=production

  bot-router:
    container_name: bot_router
    build:
      context: ./bot-router
      dockerfile: Dockerfile
    command: npm run start
    networks:
      - postgres_family
    depends_on:
      - redis
    environment:
      - mode=production

  message_service:
    container_name: message_service
    build:
      context: ./message-service
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    command: npm run start
    depends_on:
      - message_db
      - redis
    networks:
      - postgres_family
    environment:
      - mode=production

volumes:
  redis_data:
    driver: local

networks:
  postgres_family:
    driver: bridge
