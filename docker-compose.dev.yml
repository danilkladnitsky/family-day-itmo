version: "3"

services:
  bot-manager:
    container_name: bot-manager
    build:
      context: ./bot-manager
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./bot-manager:/usr/src/manager
    command: npm run start:dev
    networks:
      - redis
      - postgres

  bot-router:
    container_name: bot-router
    build:
      context: ./bot-router
      dockerfile: Dockerfile.dev
    ports:
      - "3010:4000"
    volumes:
      - ./bot-router:/usr/src/router
    command: npm run start:dev
    networks:
      - redis
      - postgres

  redis:
    image: "redis:latest"
    container_name: microservice-redis
    restart: always
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - "REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL"
    labels:
      kompose.service.type: nodeport
    command:
      - redis-server
      - "--bind"
      - redis
      - "--port"
      - "6379"
    volumes:
      - "./redis_data:/usr/local/etc/redis/redis.conf"
    ports:
      - "6379:6379"
    networks:
      - redis

  postgres:
    container_name: postgres_manager
    image: postgres:14.3-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: ${PGDATA}
    volumes:
      - ./postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    ports:
      - "5440:80"
    networks:
      - postgres
    restart: unless-stopped

networks:
  postgres:
    driver: bridge
  redis:
    driver: bridge

volumes:
  redis_data:
    driver: local
